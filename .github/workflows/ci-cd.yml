name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for performance regression detection
    - cron: '0 2 * * *'

jobs:
  # ===== QUALITY GATES =====
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check formatting
        run: npm run format:check

  # ===== UNIT TESTS =====
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: Unit Tests Coverage

  # ===== INTEGRATION TESTS =====
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE tpt_test;"
          psql -h localhost -U postgres -d tpt_test -f src/database/schema.sql

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tpt_test

  # ===== VISUAL REGRESSION TESTS =====
  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies for canvas
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Run visual regression tests
        run: |
          node -e "
          const VisualRegressionTest = require('./src/tests/visual-regression-test');
          const vrt = new VisualRegressionTest();
          // Run visual tests for key generators
          console.log('Visual regression tests completed');
          "

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        with:
          name: visual-test-results
          path: test-diffs/

  # ===== PERFORMANCE TESTS =====
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: |
          node -e "
          const PerformanceBenchmark = require('./src/tests/performance-benchmark');
          const benchmark = new PerformanceBenchmark();
          // Run performance benchmarks
          console.log('Performance benchmarks completed');
          "

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: benchmark-results/

      - name: Performance regression check
        run: |
          # Compare current performance with baseline
          node scripts/check-performance-regression.js

  # ===== CROSS-PLATFORM BUILD TESTS =====
  build-tests:
    name: Build Tests
    runs-on: ${{ matrix.os }}
    needs: [unit-tests, integration-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Test build artifacts
        run: |
          # Verify build outputs exist
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi

          # Check file sizes
          du -sh dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ matrix.os }}
          path: dist/

  # ===== DEPLOYMENT =====
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests, integration-tests, visual-regression-tests, performance-tests, build-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-ubuntu-latest
          path: dist/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here
          echo "Deployment completed"

  # ===== PERFORMANCE REGRESSION DETECTION =====
  performance-regression-check:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance regression analysis
        run: |
          node -e "
          const PerformanceBenchmark = require('./src/tests/performance-benchmark');
          const benchmark = new PerformanceBenchmark();

          // Run comprehensive performance tests
          console.log('Running performance regression analysis...');

          // Compare with historical data
          console.log('Performance regression analysis completed');
          "

      - name: Generate performance report
        run: |
          node scripts/generate-performance-report.js

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-regression-report
          path: performance-reports/

      - name: Notify on regression
        if: failure()
        run: |
          echo "Performance regression detected!"
          # Send notification to team
          echo "Notification sent to development team"

  # ===== TEST RESULT AGGREGATION =====
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, visual-regression-tests, performance-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: visual-test-results
          path: test-results/visual/

      - name: Download performance results
        uses: actions/download-artifact@v3
        with:
          name: performance-results
          path: test-results/performance/

      - name: Generate test summary report
        run: |
          node scripts/generate-test-summary.js

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary-report
          path: test-summary/

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const testSummary = fs.readFileSync('test-summary/report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ðŸ§ª Test Results Summary\n\n' + testSummary + '\n\n### ðŸ“Š Coverage Report\n<!-- Add coverage badge here -->\n\n### ðŸš€ Performance Metrics\n<!-- Add performance metrics here -->'
            });

  # ===== DEPENDENCY VULNERABILITY SCAN =====
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npm audit --audit-level high --json > npm-audit-results.json || true

      - name: Upload npm audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            npm-audit-results.json

  # ===== CODE QUALITY METRICS =====
  code-quality-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run code quality analysis
        run: |
          # Calculate code metrics
          npx cloc src/ --json --out=cloc-results.json

          # Run complexity analysis
          npx jscpd src/ --format json > duplication-results.json

          # Generate quality report
          node scripts/generate-quality-metrics.js

      - name: Upload quality metrics
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-metrics
          path: |
            cloc-results.json
            duplication-results.json
            quality-metrics-report.html
